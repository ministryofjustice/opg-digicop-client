name: CI
on:
  push:
    branches: [ SER-4 ]
  pull_request:
    branches: [ SER-4 ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  select_project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: check branch
        id: check-branch
        run: |
          if [[ ${{ github.ref }} =~ ^refs/heads/SER-[0-9]* ]]; then
              echo ::set-output name=new::true
          elif [[ ${{ github.ref }} =~ ^refs/heads/DDPB-[0-9]* ]]; then
              echo ::set-output name=old::true
          else
            echo "Please use a SER or DDPB prefix for your branch name!"
            exit 1
          fi
          echo $WORKSPACE

  cancel_redundant_builds:
    runs-on: ubuntu-latest
    steps:
      - name: check branch
        id: check-branch
        run: echo "Cancelling redundant builds"

  build_and_test:
    runs-on: ubuntu-latest
    needs: [cancel_redundant_builds, select_project]
    if: jobs.select_project.steps.check-branch.outputs.new == 'true'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: ./_serve-opg-new/
          key: ${{ runner.os }}-${{ hashFiles('**/*.lock') }}
      - name: show some vars
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          WORKSPACE=${GITHUB_REF##*/}
          WORKSPACE=${BRANCH//[^[:alnum:]]/}
          WORKSPACE=${WORKSPACE,,}
          WORKSPACE=${WORKSPACE:0:14}
          echo "${WORKSPACE}"
          echo "::set-env name=WORKSPACE::$WORKSPACE"
      - name: Prepare localstack
        working-directory: ./_serve-opg-new
        run: |
          # Create the s3 buckets & wait for the server to become available
          docker-compose up -d localstack
          docker-compose run --rm waitforit -address=http://localstack:4572 -debug -timeout=30
          docker-compose run --rm aws --endpoint-url=http://localstack:4572 s3 mb s3://sirius_test_bucket
          docker-compose run --rm aws --endpoint-url=http://localstack:4572 s3 mb s3://test_bucket
          # Create dynamodb tables
          docker-compose run --rm aws --region eu-west-1 --endpoint-url=http://localstack:4569 dynamodb create-table --cli-input-json file://attempts_table.json
          docker-compose run --rm aws --region eu-west-1 --endpoint-url=http://localstack:4569 dynamodb create-table --cli-input-json file://sessions_table.json
      - name: Create dependencies
        working-directory: ./_serve-opg-new
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install --quiet awscli
          # Triggers Symfony Flex to run recipes during composer install - required for phpunit-bridge
          rm -rf vendor
          rm -rf symfony.lock
          # Vendor php dependencies
          docker-compose run --rm app composer install --no-interaction
          # Install js dependencies
          docker-compose run --rm yarn install
          # Generate static assets
          docker-compose run --rm yarn build-dev
          # Removes boilerplate feature test added during Symfony Flex recipe for behat
          rm -rf features/demo.feature
      - name: Build
        working-directory: ./_serve-opg-new
        run: echo "Building and pushing to ECR"
      - name: Unit test PHP
        working-directory: ./_serve-opg-new
        if: steps.check-branch.outputs.new == 'true'
        run: |
          ./generate_certs.sh
          docker-compose -f docker-compose.test.yml -f docker-compose.yml up --build -d loadbalancer
          docker-compose run --rm waitforit -address=tcp://loadbalancer:443 -debug -timeout 120
          docker-compose run --rm waitforit -address=tcp://postgres:5432 -debug
          docker-compose -f docker-compose.test.yml -f docker-compose.yml run --rm app php bin/phpunit --verbose tests --log-junit /var/www/tests/artifacts/phpunit/junit.xml
      - name: Unit tests Golang
        working-directory: ./_serve-opg-new
        run: echo "Running Go tests"

#      - name: Plan terraform to branch env
#      - name: Plan shared branch
#      - name: Apply terraform to branch env
#      - name: Protect branch environment
#      - name: Integration tests on branch
#      - name: Plan terraform on other environments
#      - name: Unprotect environment approval step
#      - name: Notify slack branch complete
#
#    merge pr
#
#    cancel redundant build - 1
#    checkout code - 1
#    check which build to run - 2
#
#
#    Create dependencies - 3
#    Build and push to ECR - 4
#    Terraform plan development-shared - 5
#    Terraform plan development - 5
#    PHP unit tests - 5
#    Go Tests - 5
#    Apply development-shared - 6
#    Apply developemnt - 7
#    Integration tests development - 8
#    Plan preproduction-shared - 8
#    Plan Preproduction - 9
#    Apply Preproduction-shared - 10
#    Apply preproduction - 11
#    Notify Slack - 12
#    Approval step - 12
#    Plan Production - 13
#    Apply Production - 14
#    Smoke test production - 15
#    Notify Success - 16
#    Notify Fail - 16
#    Create Release - 17
#    Rollback procedure - 17

  kick_off_old_wf:
    runs-on: ubuntu-latest
    needs: [cancel_redundant_builds, select_project]
    if: jobs.select_project.steps.check-branch.outputs.old == 'true'
    steps:
      - name: Kick off old workflow
        run: |
          BRANCH=${GITHUB_REF##*/}
          curl --request POST \
            --url https://circleci.com/api/v2/project/github/ministryofjustice/serve-opg/pipeline \
            --header 'Circle-Token: ${{ secrets.CIRCLE_API_KEY }}' \
            --header 'content-type: application/json' \
            --data '{"parameters":{"run_legacy_pipeline":true}, "branch": "${BRANCH}"}'


